#!/usr/bin/python

import os, sys, csv
from argparse import ArgumentParser
import xml.etree.cElementTree as et

try :
    import sldr.langtags as lt
except ImportError :
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'lib')))
    import sldr.langtags as lt

def find_file(tagstr, root='.') :
    fname = tagstr.replace('-', '_') + '.xml'
    testf = os.path.join(root, fname)
    if os.path.exists(testf) : return testf
    testf = os.path.join(root, fname[0], fname)
    if os.path.exists(testf) : return testf
    return None

def issimple(testf):
    try:
        doc = et.parse(testf)
    except:
        return False
    if len(doc.getroot()) > 1 : return False
    return True

def process_cldrentry(s, lts, allentries, root='.'):
    s = s.replace("_", "-")
    if s in lts:
        return
    l = lt.LangTag(s)
    if l.region is not None:
        t = lt.LangTag(tag=None, lang=l.lang, script=l.script, variants=l.variants, extensions=l.extensions)
        n = None
        if t in lts:
            n = lts[t]
        elif str(t) in allentries:
            if str(l.region) in allentries[str(t)][1]:
                n = allentries[str(t)][0]
        if n is not None:
            if l.script is None:
                l.script = n.script
                l.hidescript = True
        testf = find_file(str(t), root=root)
        if testf is not None:
            l.parent = t
            l.parentsame = issimple(find_file(s, root))
    lts.add(l)
    return l

parser = ArgumentParser()
parser.add_argument('infile', help='Input CSV file from Google drive')
parser.add_argument('outfile', help='alltags.txt output file')
parser.add_argument('-i','--indir', default='.', help='Directory containing sldr tree')
parser.add_argument('-p','--operators',action="store_true",default=False,help="Output complex operators")
args = parser.parse_args()

lts = lt.LangTags(noalltags=True)
allentries = {}
allmacros = {}
with open(args.infile) as csvfile :
    reader = csv.DictReader(csvfile)
    for row in reader :
#        if 'CLDR' in row['confirmed'] : continue
        id = row['Lang_Id']
        ls = row['likely_subtag']
        macro = row['Macro']
        t = lt.LangTag(ls)
        if t.script == 'Zyyy' or t.script == 'Qaax' : continue
        b = lt.LangTag(id)
        if b.script is None :
            t.hidescript = True
        if b.region is None :
            t.hideregion = True
        t.hideboth = b.hideboth
        lts.add(t)
        allentries[id] = (t, row['regions'].split(' '))
        if macro != "":
            s = str(t)
            b.lang = macro
            allmacros[s] = str(b)

for l in os.listdir(args.indir) :
    if l.endswith('.xml') :
        if 1 < len(l.split('_', 1)[0]) < 4 :
            process_cldrentry(l[:-4], lts, allentries, root=args.indir)
    elif len(l) == 1 and os.path.isdir(os.path.join(args.indir, l)) :
        for s in os.listdir(os.path.join(args.indir, l)) :
            if s.endswith('.xml') :
                if 1 < len(s.split('_', 1)[0]) < 4 :
                    process_cldrentry(s[:-4], lts, allentries, root=args.indir)

for k, v in allmacros.items():
    try:
        macro = lts[v]
        base = lts[k]
    except KeyError:
        continue
    macro.base = base
    base.skip = True
    

with open(args.outfile, "w") as alltags :
    res = lts.generate_alltags()
    
    outstrings = []
    for line in res:
        lineres = [[" = ", x] for x in line if x]
        if not len(lineres):
            continue
        lineres[0][0] = ""
        hasstar = False
        for l in lineres:
            tf = find_file(l[1], root=args.indir)
            if tf is not None:
                if hasstar:
                    if args.operators:
                        l[0] = " |= " if issimple(tf) else " <= "
#                    else:
#                        l[0] = " | "
                elif args.operators and hasattr(lts.get(l[1], l[1]), "parent"):
                    x = lts[l[1]]
                    l[1] = l[1] + (" >| " if x.parentsame else " > ") + "*" + str(x.parent)
                l[1] = "*" + l[1]
                hasstar = True
        outstrings.append("".join(x[0] + x[1] for x in lineres))
    alltags.write("\n".join(sorted(outstrings, key=lambda x:x.replace('*', ''))) + "\n")




